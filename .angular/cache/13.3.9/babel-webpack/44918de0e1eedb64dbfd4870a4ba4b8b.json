{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, PLATFORM_ID, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser, CommonModule } from '@angular/common';\n/** Segment Configuration Injection Token */\n\nconst SEGMENT_CONFIG = new InjectionToken('ngx-segment-analytics.config');\nconst DEFAULT_CONFIG = {\n  debug: false,\n  loadOnInitialization: true,\n  segmentHost: 'cdn.segment.com',\n  segmentUri: '/analytics.js/v1/$API_KEY$/analytics.min.js'\n};\n/**\n * Window Wrapper for Angular AOT\n */\n\nlet WindowWrapper = /*#__PURE__*/(() => {\n  class WindowWrapper {}\n\n  WindowWrapper.ɵfac = function WindowWrapper_Factory(t) {\n    return new (t || WindowWrapper)();\n  };\n\n  WindowWrapper.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: WindowWrapper,\n    factory: WindowWrapper.ɵfac\n  });\n  return WindowWrapper;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SegmentService = /*#__PURE__*/(() => {\n  class SegmentService {\n    /**\n     * @param _w Browser window\n     * @param _doc Browser DOM\n     * @param userConfig Segment configuration\n     */\n    constructor(_w, _doc, userConfig) {\n      this._w = _w;\n      this._doc = _doc;\n      this._config = Object.assign(Object.assign({}, DEFAULT_CONFIG), userConfig);\n\n      if (this._config.loadOnInitialization && (typeof this._config.apiKey === 'undefined' || this._config.apiKey === '')) {\n        console.error('The API Key cannot be an empty string if Segment must be loaded on initialization.');\n        return;\n      }\n\n      if (typeof this._w.analytics === 'undefined' || typeof this._w.analytics.initialize === 'undefined' || this._w.analytics.initialize === false) {\n        if (typeof this._w.analytics !== 'undefined' && this._w.analytics.invoked === true) {\n          console.error('Segment snippet included twice.');\n          return;\n        }\n\n        if (this._config.debug) {\n          console.log('Segment initialization...');\n        }\n\n        this._w.analytics = [];\n        this._w.analytics.invoked = true;\n        this._w.analytics.methods = ['trackSubmit', 'trackClick', 'trackLink', 'trackForm', 'pageview', 'identify', 'reset', 'group', 'track', 'ready', 'alias', 'debug', 'page', 'once', 'off', 'on', 'addSourceMiddleware', 'addIntegrationMiddleware', 'setAnonymousId', 'addDestinationMiddleware'];\n\n        this._w.analytics.factory = method => {\n          return (...args) => {\n            args.unshift(method);\n\n            this._w.analytics.push(args);\n\n            return this._w.analytics;\n          };\n        };\n\n        this._w.analytics.methods.forEach(method => {\n          this._w.analytics[method] = this._w.analytics.factory(method);\n        });\n\n        this._w.analytics.load = (key, options) => {\n          const script = this._doc.createElement('script');\n\n          script.type = 'text/javascript';\n          script.async = true;\n          script.src = 'https://' + this._config.segmentHost + this._config.segmentUri.replace('$API_KEY$', key);\n\n          const first = this._doc.getElementsByTagName('script')[0];\n\n          first.parentNode.insertBefore(script, first);\n          this._w.analytics._loadOptions = options;\n        };\n\n        this._w.analytics._writeKey = this._config.apiKey;\n        this._w.analytics.SNIPPET_VERSION = '4.13.2';\n\n        if (this._config.loadOnInitialization) {\n          this.load(this._config.apiKey);\n        }\n      }\n    }\n    /**\n     * Load Segment configuration.\n     *\n     * @param apiKey Write API Key\n     * @param options Optional parameters\n     */\n\n\n    load(apiKey, options) {\n      this._w.analytics.load(apiKey, options);\n\n      if (this._config.debug) {\n        console.log('Segment initialized');\n      }\n\n      this.debug(this._config.debug);\n    }\n    /**\n     * The identify method is how you associate your users and their actions to a recognizable userId and traits.\n     *\n     * @param userId The database ID for the user.\n     * @param traits A dictionary of traits you know about the user, like their email or name\n     * @param options A dictionary of options.\n     *\n     * @returns\n     */\n\n\n    identify(userId, traits, options) {\n      return new Promise(resolve => {\n        this._w.analytics.identify(userId, traits, options, _ => resolve(this));\n      });\n    }\n    /**\n     * The track method lets you record any actions your users perform.\n     *\n     * @param event The name of the event you’re tracking.\n     * @param properties A dictionary of properties for the event.\n     * @param options A dictionary of options.\n     *\n     * @returns\n     */\n\n\n    track(event, properties, options) {\n      return new Promise(resolve => {\n        this._w.analytics.track(event, properties, options, _ => resolve(this));\n      });\n    }\n    /**\n     * The page method lets you record page views on your website, along with optional extra information about the page being viewed.\n     *\n     * @param category The category of the page.\n     * @param name The name of the page.\n     * @param properties A dictionary of properties of the page.\n     * @param options A dictionary of options.\n     *\n     * @returns\n     */\n\n\n    page(category, name, properties, options) {\n      return new Promise(resolve => {\n        this._w.analytics.page(category, name, properties, options, _ => resolve(this));\n      });\n    }\n    /**\n     * The group method associates an identified user with a company, organization, project, workspace, team, tribe, platoon,\n     * assemblage, cluster, troop, gang, party, society or any other name you came up with for the same concept.\n     *\n     * @param groupId The Group ID to associate with the current user.\n     * @param traits A dictionary of traits for the group.\n     *\n     * @returns\n     */\n\n\n    group(groupId, traits) {\n      return new Promise(resolve => {\n        this._w.analytics.group(groupId, traits, _ => resolve(this));\n      });\n    }\n    /**\n     * The alias method combines two previously unassociated user identities.\n     *\n     * @param userId The new user ID you want to associate with the user.\n     * @param previousId The previous ID that the user was recognized by. This defaults to the currently identified user’s ID.\n     * @param options A dictionary of options.\n     *\n     * @returns\n     */\n\n\n    alias(userId, previousId, options) {\n      return new Promise(resolve => {\n        this._w.analytics.alias(userId, previousId, options, _ => resolve(this));\n      });\n    }\n    /**\n     * The ready method allows you execute a promise that will be called as soon as all of your enabled destinations have loaded\n     * and analytics.js has completed initialization.\n     *\n     * @returns\n     */\n\n\n    ready() {\n      return new Promise(resolve => {\n        this._w.analytics.ready(_ => resolve(this));\n      });\n    }\n    /**\n     * Return informations about the currently identified user\n     *\n     * @returns Informations about the currently identified user\n     */\n\n\n    user() {\n      return this._w.analytics.user();\n    }\n    /**\n     * Return identifier about the currently identified user\n     *\n     * @returns Identifier about the currently identified user\n     */\n\n\n    id() {\n      return this._w.analytics.id();\n    }\n    /**\n     * Override the default Anonymous ID\n     *\n     * @param anonymousId New anonymous ID\n     */\n\n\n    setAnonymousId(anonymousId) {\n      this._w.analytics.setAnonymousId(anonymousId);\n    }\n    /**\n     * Return traits about the currently identified user\n     *\n     * @returns Traits about the currently identified user\n     */\n\n\n    traits() {\n      return this._w.analytics.user().traits();\n    }\n    /**\n     * Reset the id, including anonymousId, and clear traits for the currently identified user and group.\n     */\n\n\n    reset() {\n      this._w.analytics.reset();\n    }\n    /**\n     * Turn on/off debug mode, logging helpful messages to the console.\n     *\n     * @param enabled Enable or not the debug mode\n     */\n\n\n    debug(enabled) {\n      this._w.analytics.debug(enabled);\n    }\n    /**\n     * Set listeners for these events and run your own custom code.\n     *\n     * @param method Name of the method to listen for\n     * @param callback A function to execute after each the emitted method\n     */\n\n\n    on(method, callback) {\n      this._w.analytics.on(method, callback);\n    }\n    /**\n     * Attaches the `track` call as a handler to a link\n     *\n     * @param elements DOM element or an array of DOM elements to be bound with track method.\n     * @param event The name of the event, passed to the `track` method or a function that returns a string to be used\n     *              as the name of the track event.\n     * @param properties A dictionary of properties to pass with the `track` method.\n     */\n\n\n    trackLink(elements, event, properties) {\n      this._w.analytics.trackLink(elements, event, properties);\n    }\n    /**\n     * Binds a `track` call to a form submission.\n     *\n     * @param forms The form element to track or an array of form\n     * @param event The name of the event, passed to the `track` method.\n     * @param properties A dictionary of properties to pass with the `track` method.\n     */\n\n\n    trackForm(forms, event, properties) {\n      this._w.analytics.trackForm(forms, event, properties);\n    }\n    /**\n     * Set the length (in milliseconds) of the callbacks and helper functions\n     *\n     * @param timeout Number of milliseconds\n     */\n\n\n    timeout(timeout) {\n      this._w.analytics.timeout(timeout);\n    }\n    /**\n     * Add a source middleware called on events\n     *\n     * @param middleware Custom function\n     */\n\n\n    addSourceMiddleware(middleware) {\n      this._w.analytics.addSourceMiddleware(middleware);\n    }\n    /**\n     * Add a destination middleware called on events\n     *\n     * @param integration Integration name\n     * @param middlewares Custom functions\n     */\n\n\n    addDestinationMiddleware(integration, middlewares) {\n      this._w.analytics.addDestinationMiddleware(integration, middlewares);\n    }\n\n    get plugins() {\n      return this._w.analytics.plugins;\n    }\n\n  }\n\n  SegmentService.ɵfac = function SegmentService_Factory(t) {\n    return new (t || SegmentService)(i0.ɵɵinject(WindowWrapper), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(SEGMENT_CONFIG));\n  };\n\n  SegmentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SegmentService,\n    factory: SegmentService.ɵfac,\n    providedIn: 'root'\n  });\n  return SegmentService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Window Provider for Angular AOT\n * @returns Browser Window instance\n */\n\n\nfunction getWindow(platformId) {\n  return isPlatformBrowser(platformId) ? window : {};\n}\n/**\n * Segment Module\n */\n\n\nlet SegmentModule = /*#__PURE__*/(() => {\n  class SegmentModule {\n    /**\n     * Segment Module Constructor\n     *\n     * @param parentModule Must be null\n     */\n    constructor(parentModule) {\n      if (parentModule) {\n        throw new Error('SegmentModule is already loaded. Import it in the AppModule only');\n      }\n    }\n    /**\n     * Segment Module Initialisation\n     *\n     * @param config Segment Configuration\n     * @returns Segment Module\n     */\n\n\n    static forRoot(config) {\n      return {\n        ngModule: SegmentModule,\n        providers: [{\n          provide: SEGMENT_CONFIG,\n          useValue: config\n        }, SegmentService]\n      };\n    }\n\n  }\n\n  SegmentModule.ɵfac = function SegmentModule_Factory(t) {\n    return new (t || SegmentModule)(i0.ɵɵinject(SegmentModule, 12));\n  };\n\n  SegmentModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SegmentModule\n  });\n  SegmentModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: WindowWrapper,\n      useFactory: getWindow,\n      deps: [PLATFORM_ID]\n    }],\n    imports: [[CommonModule]]\n  });\n  return SegmentModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DEFAULT_CONFIG, SEGMENT_CONFIG, SegmentModule, SegmentService, WindowWrapper, getWindow }; //# sourceMappingURL=ngx-segment-analytics.mjs.map","map":null,"metadata":{},"sourceType":"module"}