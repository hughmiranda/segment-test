{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, PLATFORM_ID, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser, CommonModule } from '@angular/common';\n/** Segment Configuration Injection Token */\n\nconst SEGMENT_CONFIG = new InjectionToken('ngx-segment-analytics.config');\nconst DEFAULT_CONFIG = {\n  debug: false,\n  loadOnInitialization: true,\n  segmentHost: 'cdn.segment.com',\n  segmentUri: '/analytics.js/v1/$API_KEY$/analytics.min.js'\n};\n/**\n * Window Wrapper for Angular AOT\n */\n\nclass WindowWrapper {}\n\nWindowWrapper.ɵfac = function WindowWrapper_Factory(t) {\n  return new (t || WindowWrapper)();\n};\n\nWindowWrapper.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: WindowWrapper,\n  factory: WindowWrapper.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WindowWrapper, [{\n    type: Injectable\n  }], null, null);\n})();\n\nclass SegmentService {\n  /**\n   * @param _w Browser window\n   * @param _doc Browser DOM\n   * @param userConfig Segment configuration\n   */\n  constructor(_w, _doc, userConfig) {\n    this._w = _w;\n    this._doc = _doc;\n    this._config = Object.assign(Object.assign({}, DEFAULT_CONFIG), userConfig);\n\n    if (this._config.loadOnInitialization && (typeof this._config.apiKey === 'undefined' || this._config.apiKey === '')) {\n      console.error('The API Key cannot be an empty string if Segment must be loaded on initialization.');\n      return;\n    }\n\n    if (typeof this._w.analytics === 'undefined' || typeof this._w.analytics.initialize === 'undefined' || this._w.analytics.initialize === false) {\n      if (typeof this._w.analytics !== 'undefined' && this._w.analytics.invoked === true) {\n        console.error('Segment snippet included twice.');\n        return;\n      }\n\n      if (this._config.debug) {\n        console.log('Segment initialization...');\n      }\n\n      this._w.analytics = [];\n      this._w.analytics.invoked = true;\n      this._w.analytics.methods = ['trackSubmit', 'trackClick', 'trackLink', 'trackForm', 'pageview', 'identify', 'reset', 'group', 'track', 'ready', 'alias', 'debug', 'page', 'once', 'off', 'on', 'addSourceMiddleware', 'addIntegrationMiddleware', 'setAnonymousId', 'addDestinationMiddleware'];\n\n      this._w.analytics.factory = method => {\n        return (...args) => {\n          args.unshift(method);\n\n          this._w.analytics.push(args);\n\n          return this._w.analytics;\n        };\n      };\n\n      this._w.analytics.methods.forEach(method => {\n        this._w.analytics[method] = this._w.analytics.factory(method);\n      });\n\n      this._w.analytics.load = (key, options) => {\n        const script = this._doc.createElement('script');\n\n        script.type = 'text/javascript';\n        script.async = true;\n        script.src = 'https://' + this._config.segmentHost + this._config.segmentUri.replace('$API_KEY$', key);\n\n        const first = this._doc.getElementsByTagName('script')[0];\n\n        first.parentNode.insertBefore(script, first);\n        this._w.analytics._loadOptions = options;\n      };\n\n      this._w.analytics._writeKey = this._config.apiKey;\n      this._w.analytics.SNIPPET_VERSION = '4.13.2';\n\n      if (this._config.loadOnInitialization) {\n        this.load(this._config.apiKey);\n      }\n    }\n  }\n  /**\n   * Load Segment configuration.\n   *\n   * @param apiKey Write API Key\n   * @param options Optional parameters\n   */\n\n\n  load(apiKey, options) {\n    this._w.analytics.load(apiKey, options);\n\n    if (this._config.debug) {\n      console.log('Segment initialized');\n    }\n\n    this.debug(this._config.debug);\n  }\n  /**\n   * The identify method is how you associate your users and their actions to a recognizable userId and traits.\n   *\n   * @param userId The database ID for the user.\n   * @param traits A dictionary of traits you know about the user, like their email or name\n   * @param options A dictionary of options.\n   *\n   * @returns\n   */\n\n\n  identify(userId, traits, options) {\n    return new Promise(resolve => {\n      this._w.analytics.identify(userId, traits, options, _ => resolve(this));\n    });\n  }\n  /**\n   * The track method lets you record any actions your users perform.\n   *\n   * @param event The name of the event you’re tracking.\n   * @param properties A dictionary of properties for the event.\n   * @param options A dictionary of options.\n   *\n   * @returns\n   */\n\n\n  track(event, properties, options) {\n    return new Promise(resolve => {\n      this._w.analytics.track(event, properties, options, _ => resolve(this));\n    });\n  }\n  /**\n   * The page method lets you record page views on your website, along with optional extra information about the page being viewed.\n   *\n   * @param category The category of the page.\n   * @param name The name of the page.\n   * @param properties A dictionary of properties of the page.\n   * @param options A dictionary of options.\n   *\n   * @returns\n   */\n\n\n  page(category, name, properties, options) {\n    return new Promise(resolve => {\n      this._w.analytics.page(category, name, properties, options, _ => resolve(this));\n    });\n  }\n  /**\n   * The group method associates an identified user with a company, organization, project, workspace, team, tribe, platoon,\n   * assemblage, cluster, troop, gang, party, society or any other name you came up with for the same concept.\n   *\n   * @param groupId The Group ID to associate with the current user.\n   * @param traits A dictionary of traits for the group.\n   *\n   * @returns\n   */\n\n\n  group(groupId, traits) {\n    return new Promise(resolve => {\n      this._w.analytics.group(groupId, traits, _ => resolve(this));\n    });\n  }\n  /**\n   * The alias method combines two previously unassociated user identities.\n   *\n   * @param userId The new user ID you want to associate with the user.\n   * @param previousId The previous ID that the user was recognized by. This defaults to the currently identified user’s ID.\n   * @param options A dictionary of options.\n   *\n   * @returns\n   */\n\n\n  alias(userId, previousId, options) {\n    return new Promise(resolve => {\n      this._w.analytics.alias(userId, previousId, options, _ => resolve(this));\n    });\n  }\n  /**\n   * The ready method allows you execute a promise that will be called as soon as all of your enabled destinations have loaded\n   * and analytics.js has completed initialization.\n   *\n   * @returns\n   */\n\n\n  ready() {\n    return new Promise(resolve => {\n      this._w.analytics.ready(_ => resolve(this));\n    });\n  }\n  /**\n   * Return informations about the currently identified user\n   *\n   * @returns Informations about the currently identified user\n   */\n\n\n  user() {\n    return this._w.analytics.user();\n  }\n  /**\n   * Return identifier about the currently identified user\n   *\n   * @returns Identifier about the currently identified user\n   */\n\n\n  id() {\n    return this._w.analytics.id();\n  }\n  /**\n   * Override the default Anonymous ID\n   *\n   * @param anonymousId New anonymous ID\n   */\n\n\n  setAnonymousId(anonymousId) {\n    this._w.analytics.setAnonymousId(anonymousId);\n  }\n  /**\n   * Return traits about the currently identified user\n   *\n   * @returns Traits about the currently identified user\n   */\n\n\n  traits() {\n    return this._w.analytics.user().traits();\n  }\n  /**\n   * Reset the id, including anonymousId, and clear traits for the currently identified user and group.\n   */\n\n\n  reset() {\n    this._w.analytics.reset();\n  }\n  /**\n   * Turn on/off debug mode, logging helpful messages to the console.\n   *\n   * @param enabled Enable or not the debug mode\n   */\n\n\n  debug(enabled) {\n    this._w.analytics.debug(enabled);\n  }\n  /**\n   * Set listeners for these events and run your own custom code.\n   *\n   * @param method Name of the method to listen for\n   * @param callback A function to execute after each the emitted method\n   */\n\n\n  on(method, callback) {\n    this._w.analytics.on(method, callback);\n  }\n  /**\n   * Attaches the `track` call as a handler to a link\n   *\n   * @param elements DOM element or an array of DOM elements to be bound with track method.\n   * @param event The name of the event, passed to the `track` method or a function that returns a string to be used\n   *              as the name of the track event.\n   * @param properties A dictionary of properties to pass with the `track` method.\n   */\n\n\n  trackLink(elements, event, properties) {\n    this._w.analytics.trackLink(elements, event, properties);\n  }\n  /**\n   * Binds a `track` call to a form submission.\n   *\n   * @param forms The form element to track or an array of form\n   * @param event The name of the event, passed to the `track` method.\n   * @param properties A dictionary of properties to pass with the `track` method.\n   */\n\n\n  trackForm(forms, event, properties) {\n    this._w.analytics.trackForm(forms, event, properties);\n  }\n  /**\n   * Set the length (in milliseconds) of the callbacks and helper functions\n   *\n   * @param timeout Number of milliseconds\n   */\n\n\n  timeout(timeout) {\n    this._w.analytics.timeout(timeout);\n  }\n  /**\n   * Add a source middleware called on events\n   *\n   * @param middleware Custom function\n   */\n\n\n  addSourceMiddleware(middleware) {\n    this._w.analytics.addSourceMiddleware(middleware);\n  }\n  /**\n   * Add a destination middleware called on events\n   *\n   * @param integration Integration name\n   * @param middlewares Custom functions\n   */\n\n\n  addDestinationMiddleware(integration, middlewares) {\n    this._w.analytics.addDestinationMiddleware(integration, middlewares);\n  }\n\n  get plugins() {\n    return this._w.analytics.plugins;\n  }\n\n}\n\nSegmentService.ɵfac = function SegmentService_Factory(t) {\n  return new (t || SegmentService)(i0.ɵɵinject(WindowWrapper), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(SEGMENT_CONFIG));\n};\n\nSegmentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SegmentService,\n  factory: SegmentService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SegmentService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: WindowWrapper,\n      decorators: [{\n        type: Inject,\n        args: [WindowWrapper]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [SEGMENT_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Window Provider for Angular AOT\n * @returns Browser Window instance\n */\n\n\nfunction getWindow(platformId) {\n  return isPlatformBrowser(platformId) ? window : {};\n}\n/**\n * Segment Module\n */\n\n\nclass SegmentModule {\n  /**\n   * Segment Module Constructor\n   *\n   * @param parentModule Must be null\n   */\n  constructor(parentModule) {\n    if (parentModule) {\n      throw new Error('SegmentModule is already loaded. Import it in the AppModule only');\n    }\n  }\n  /**\n   * Segment Module Initialisation\n   *\n   * @param config Segment Configuration\n   * @returns Segment Module\n   */\n\n\n  static forRoot(config) {\n    return {\n      ngModule: SegmentModule,\n      providers: [{\n        provide: SEGMENT_CONFIG,\n        useValue: config\n      }, SegmentService]\n    };\n  }\n\n}\n\nSegmentModule.ɵfac = function SegmentModule_Factory(t) {\n  return new (t || SegmentModule)(i0.ɵɵinject(SegmentModule, 12));\n};\n\nSegmentModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SegmentModule\n});\nSegmentModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [{\n    provide: WindowWrapper,\n    useFactory: getWindow,\n    deps: [PLATFORM_ID]\n  }],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SegmentModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [{\n        provide: WindowWrapper,\n        useFactory: getWindow,\n        deps: [PLATFORM_ID]\n      }]\n    }]\n  }], function () {\n    return [{\n      type: SegmentModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DEFAULT_CONFIG, SEGMENT_CONFIG, SegmentModule, SegmentService, WindowWrapper, getWindow };","map":{"version":3,"sources":["/Users/hughmiranda/segment-test/node_modules/ngx-segment-analytics/fesm2015/ngx-segment-analytics.mjs"],"names":["i0","InjectionToken","Injectable","Inject","PLATFORM_ID","NgModule","Optional","SkipSelf","DOCUMENT","isPlatformBrowser","CommonModule","SEGMENT_CONFIG","DEFAULT_CONFIG","debug","loadOnInitialization","segmentHost","segmentUri","WindowWrapper","ɵfac","ɵprov","type","SegmentService","constructor","_w","_doc","userConfig","_config","Object","assign","apiKey","console","error","analytics","initialize","invoked","log","methods","factory","method","args","unshift","push","forEach","load","key","options","script","createElement","async","src","replace","first","getElementsByTagName","parentNode","insertBefore","_loadOptions","_writeKey","SNIPPET_VERSION","identify","userId","traits","Promise","resolve","_","track","event","properties","page","category","name","group","groupId","alias","previousId","ready","user","id","setAnonymousId","anonymousId","reset","enabled","on","callback","trackLink","elements","trackForm","forms","timeout","addSourceMiddleware","middleware","addDestinationMiddleware","integration","middlewares","plugins","providedIn","decorators","undefined","getWindow","platformId","window","SegmentModule","parentModule","Error","forRoot","config","ngModule","providers","provide","useValue","ɵmod","ɵinj","useFactory","deps","imports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, PLATFORM_ID, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser, CommonModule } from '@angular/common';\n\n/** Segment Configuration Injection Token */\nconst SEGMENT_CONFIG = new InjectionToken('ngx-segment-analytics.config');\nconst DEFAULT_CONFIG = {\n    debug: false,\n    loadOnInitialization: true,\n    segmentHost: 'cdn.segment.com',\n    segmentUri: '/analytics.js/v1/$API_KEY$/analytics.min.js',\n};\n\n/**\n * Window Wrapper for Angular AOT\n */\nclass WindowWrapper {\n}\nWindowWrapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: WindowWrapper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nWindowWrapper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: WindowWrapper });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: WindowWrapper, decorators: [{\n            type: Injectable\n        }] });\n\nclass SegmentService {\n    /**\n     * @param _w Browser window\n     * @param _doc Browser DOM\n     * @param userConfig Segment configuration\n     */\n    constructor(_w, _doc, userConfig) {\n        this._w = _w;\n        this._doc = _doc;\n        this._config = Object.assign(Object.assign({}, DEFAULT_CONFIG), userConfig);\n        if (this._config.loadOnInitialization && (typeof this._config.apiKey === 'undefined' || this._config.apiKey === '')) {\n            console.error('The API Key cannot be an empty string if Segment must be loaded on initialization.');\n            return;\n        }\n        if (typeof this._w.analytics === 'undefined'\n            || typeof this._w.analytics.initialize === 'undefined'\n            || this._w.analytics.initialize === false) {\n            if (typeof this._w.analytics !== 'undefined' && this._w.analytics.invoked === true) {\n                console.error('Segment snippet included twice.');\n                return;\n            }\n            if (this._config.debug) {\n                console.log('Segment initialization...');\n            }\n            this._w.analytics = [];\n            this._w.analytics.invoked = true;\n            this._w.analytics.methods = [\n                'trackSubmit',\n                'trackClick',\n                'trackLink',\n                'trackForm',\n                'pageview',\n                'identify',\n                'reset',\n                'group',\n                'track',\n                'ready',\n                'alias',\n                'debug',\n                'page',\n                'once',\n                'off',\n                'on',\n                'addSourceMiddleware',\n                'addIntegrationMiddleware',\n                'setAnonymousId',\n                'addDestinationMiddleware',\n            ];\n            this._w.analytics.factory = (method) => {\n                return (...args) => {\n                    args.unshift(method);\n                    this._w.analytics.push(args);\n                    return this._w.analytics;\n                };\n            };\n            this._w.analytics.methods.forEach((method) => {\n                this._w.analytics[method] = this._w.analytics.factory(method);\n            });\n            this._w.analytics.load = (key, options) => {\n                const script = this._doc.createElement('script');\n                script.type = 'text/javascript';\n                script.async = true;\n                script.src = 'https://' + this._config.segmentHost + this._config.segmentUri.replace('$API_KEY$', key);\n                const first = this._doc.getElementsByTagName('script')[0];\n                first.parentNode.insertBefore(script, first);\n                this._w.analytics._loadOptions = options;\n            };\n            this._w.analytics._writeKey = this._config.apiKey;\n            this._w.analytics.SNIPPET_VERSION = '4.13.2';\n            if (this._config.loadOnInitialization) {\n                this.load(this._config.apiKey);\n            }\n        }\n    }\n    /**\n     * Load Segment configuration.\n     *\n     * @param apiKey Write API Key\n     * @param options Optional parameters\n     */\n    load(apiKey, options) {\n        this._w.analytics.load(apiKey, options);\n        if (this._config.debug) {\n            console.log('Segment initialized');\n        }\n        this.debug(this._config.debug);\n    }\n    /**\n     * The identify method is how you associate your users and their actions to a recognizable userId and traits.\n     *\n     * @param userId The database ID for the user.\n     * @param traits A dictionary of traits you know about the user, like their email or name\n     * @param options A dictionary of options.\n     *\n     * @returns\n     */\n    identify(userId, traits, options) {\n        return new Promise((resolve) => {\n            this._w.analytics.identify(userId, traits, options, _ => resolve(this));\n        });\n    }\n    /**\n     * The track method lets you record any actions your users perform.\n     *\n     * @param event The name of the event you’re tracking.\n     * @param properties A dictionary of properties for the event.\n     * @param options A dictionary of options.\n     *\n     * @returns\n     */\n    track(event, properties, options) {\n        return new Promise((resolve) => {\n            this._w.analytics.track(event, properties, options, _ => resolve(this));\n        });\n    }\n    /**\n     * The page method lets you record page views on your website, along with optional extra information about the page being viewed.\n     *\n     * @param category The category of the page.\n     * @param name The name of the page.\n     * @param properties A dictionary of properties of the page.\n     * @param options A dictionary of options.\n     *\n     * @returns\n     */\n    page(category, name, properties, options) {\n        return new Promise((resolve) => {\n            this._w.analytics.page(category, name, properties, options, _ => resolve(this));\n        });\n    }\n    /**\n     * The group method associates an identified user with a company, organization, project, workspace, team, tribe, platoon,\n     * assemblage, cluster, troop, gang, party, society or any other name you came up with for the same concept.\n     *\n     * @param groupId The Group ID to associate with the current user.\n     * @param traits A dictionary of traits for the group.\n     *\n     * @returns\n     */\n    group(groupId, traits) {\n        return new Promise((resolve) => {\n            this._w.analytics.group(groupId, traits, _ => resolve(this));\n        });\n    }\n    /**\n     * The alias method combines two previously unassociated user identities.\n     *\n     * @param userId The new user ID you want to associate with the user.\n     * @param previousId The previous ID that the user was recognized by. This defaults to the currently identified user’s ID.\n     * @param options A dictionary of options.\n     *\n     * @returns\n     */\n    alias(userId, previousId, options) {\n        return new Promise((resolve) => {\n            this._w.analytics.alias(userId, previousId, options, _ => resolve(this));\n        });\n    }\n    /**\n     * The ready method allows you execute a promise that will be called as soon as all of your enabled destinations have loaded\n     * and analytics.js has completed initialization.\n     *\n     * @returns\n     */\n    ready() {\n        return new Promise((resolve) => {\n            this._w.analytics.ready(_ => resolve(this));\n        });\n    }\n    /**\n     * Return informations about the currently identified user\n     *\n     * @returns Informations about the currently identified user\n     */\n    user() {\n        return this._w.analytics.user();\n    }\n    /**\n     * Return identifier about the currently identified user\n     *\n     * @returns Identifier about the currently identified user\n     */\n    id() {\n        return this._w.analytics.id();\n    }\n    /**\n     * Override the default Anonymous ID\n     *\n     * @param anonymousId New anonymous ID\n     */\n    setAnonymousId(anonymousId) {\n        this._w.analytics.setAnonymousId(anonymousId);\n    }\n    /**\n     * Return traits about the currently identified user\n     *\n     * @returns Traits about the currently identified user\n     */\n    traits() {\n        return this._w.analytics.user().traits();\n    }\n    /**\n     * Reset the id, including anonymousId, and clear traits for the currently identified user and group.\n     */\n    reset() {\n        this._w.analytics.reset();\n    }\n    /**\n     * Turn on/off debug mode, logging helpful messages to the console.\n     *\n     * @param enabled Enable or not the debug mode\n     */\n    debug(enabled) {\n        this._w.analytics.debug(enabled);\n    }\n    /**\n     * Set listeners for these events and run your own custom code.\n     *\n     * @param method Name of the method to listen for\n     * @param callback A function to execute after each the emitted method\n     */\n    on(method, callback) {\n        this._w.analytics.on(method, callback);\n    }\n    /**\n     * Attaches the `track` call as a handler to a link\n     *\n     * @param elements DOM element or an array of DOM elements to be bound with track method.\n     * @param event The name of the event, passed to the `track` method or a function that returns a string to be used\n     *              as the name of the track event.\n     * @param properties A dictionary of properties to pass with the `track` method.\n     */\n    trackLink(elements, event, properties) {\n        this._w.analytics.trackLink(elements, event, properties);\n    }\n    /**\n     * Binds a `track` call to a form submission.\n     *\n     * @param forms The form element to track or an array of form\n     * @param event The name of the event, passed to the `track` method.\n     * @param properties A dictionary of properties to pass with the `track` method.\n     */\n    trackForm(forms, event, properties) {\n        this._w.analytics.trackForm(forms, event, properties);\n    }\n    /**\n     * Set the length (in milliseconds) of the callbacks and helper functions\n     *\n     * @param timeout Number of milliseconds\n     */\n    timeout(timeout) {\n        this._w.analytics.timeout(timeout);\n    }\n    /**\n     * Add a source middleware called on events\n     *\n     * @param middleware Custom function\n     */\n    addSourceMiddleware(middleware) {\n        this._w.analytics.addSourceMiddleware(middleware);\n    }\n    /**\n     * Add a destination middleware called on events\n     *\n     * @param integration Integration name\n     * @param middlewares Custom functions\n     */\n    addDestinationMiddleware(integration, middlewares) {\n        this._w.analytics.addDestinationMiddleware(integration, middlewares);\n    }\n    get plugins() {\n        return this._w.analytics.plugins;\n    }\n}\nSegmentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: SegmentService, deps: [{ token: WindowWrapper }, { token: DOCUMENT }, { token: SEGMENT_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });\nSegmentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: SegmentService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: SegmentService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: WindowWrapper, decorators: [{\n                        type: Inject,\n                        args: [WindowWrapper]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [SEGMENT_CONFIG]\n                    }] }];\n    } });\n\n/**\n * Window Provider for Angular AOT\n * @returns Browser Window instance\n */\nfunction getWindow(platformId) {\n    return isPlatformBrowser(platformId) ? window : {};\n}\n/**\n * Segment Module\n */\nclass SegmentModule {\n    /**\n     * Segment Module Constructor\n     *\n     * @param parentModule Must be null\n     */\n    constructor(parentModule) {\n        if (parentModule) {\n            throw new Error('SegmentModule is already loaded. Import it in the AppModule only');\n        }\n    }\n    /**\n     * Segment Module Initialisation\n     *\n     * @param config Segment Configuration\n     * @returns Segment Module\n     */\n    static forRoot(config) {\n        return {\n            ngModule: SegmentModule,\n            providers: [\n                { provide: SEGMENT_CONFIG, useValue: config },\n                SegmentService,\n            ],\n        };\n    }\n}\nSegmentModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: SegmentModule, deps: [{ token: SegmentModule, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule });\nSegmentModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: SegmentModule, imports: [CommonModule] });\nSegmentModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: SegmentModule, providers: [\n        { provide: WindowWrapper, useFactory: getWindow, deps: [PLATFORM_ID] },\n    ], imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: SegmentModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    providers: [\n                        { provide: WindowWrapper, useFactory: getWindow, deps: [PLATFORM_ID] },\n                    ]\n                }]\n        }], ctorParameters: function () {\n        return [{ type: SegmentModule, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }];\n    } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_CONFIG, SEGMENT_CONFIG, SegmentModule, SegmentService, WindowWrapper, getWindow };\n"]},"metadata":{},"sourceType":"module"}